// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createNar = `-- name: CreateNar :one
INSERT into nars (
  narinfo_id, hash, compression, file_size
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, narinfo_id, hash, compression, file_size, created_at, updated_at, last_accessed_at
`

type CreateNarParams struct {
	NarInfoID   int64
	Hash        string
	Compression string
	FileSize    uint64
}

// CreateNar
//
//	INSERT into nars (
//	  narinfo_id, hash, compression, file_size
//	) VALUES (
//	  ?, ?, ?, ?
//	)
//	RETURNING id, narinfo_id, hash, compression, file_size, created_at, updated_at, last_accessed_at
func (q *Queries) CreateNar(ctx context.Context, arg CreateNarParams) (Nar, error) {
	row := q.db.QueryRowContext(ctx, createNar,
		arg.NarInfoID,
		arg.Hash,
		arg.Compression,
		arg.FileSize,
	)
	var i Nar
	err := row.Scan(
		&i.ID,
		&i.NarInfoID,
		&i.Hash,
		&i.Compression,
		&i.FileSize,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastAccessedAt,
	)
	return i, err
}

const createNarInfo = `-- name: CreateNarInfo :one
INSERT into narinfos (
  hash
) VALUES (
  ?
)
RETURNING id, hash, created_at, updated_at, last_accessed_at
`

// CreateNarInfo
//
//	INSERT into narinfos (
//	  hash
//	) VALUES (
//	  ?
//	)
//	RETURNING id, hash, created_at, updated_at, last_accessed_at
func (q *Queries) CreateNarInfo(ctx context.Context, hash string) (NarInfo, error) {
	row := q.db.QueryRowContext(ctx, createNarInfo, hash)
	var i NarInfo
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastAccessedAt,
	)
	return i, err
}

const deleteNarByHash = `-- name: DeleteNarByHash :exec
DELETE FROM nars
WHERE hash = ?
`

// DeleteNarByHash
//
//	DELETE FROM nars
//	WHERE hash = ?
func (q *Queries) DeleteNarByHash(ctx context.Context, hash string) error {
	_, err := q.db.ExecContext(ctx, deleteNarByHash, hash)
	return err
}

const deleteNarByID = `-- name: DeleteNarByID :exec
DELETE FROM nars
WHERE id = ?
`

// DeleteNarByID
//
//	DELETE FROM nars
//	WHERE id = ?
func (q *Queries) DeleteNarByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNarByID, id)
	return err
}

const deleteNarInfoByHash = `-- name: DeleteNarInfoByHash :exec
DELETE FROM narinfos
WHERE hash = ?
`

// DeleteNarInfoByHash
//
//	DELETE FROM narinfos
//	WHERE hash = ?
func (q *Queries) DeleteNarInfoByHash(ctx context.Context, hash string) error {
	_, err := q.db.ExecContext(ctx, deleteNarInfoByHash, hash)
	return err
}

const deleteNarInfoByID = `-- name: DeleteNarInfoByID :exec
DELETE FROM narinfos
WHERE id = ?
`

// DeleteNarInfoByID
//
//	DELETE FROM narinfos
//	WHERE id = ?
func (q *Queries) DeleteNarInfoByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNarInfoByID, id)
	return err
}

const getLeastUsedNars = `-- name: GetLeastUsedNars :many
SELECT
  n1.id, n1.narinfo_id, n1.hash, n1.compression, n1.file_size, n1.created_at, n1.updated_at, n1.last_accessed_at
FROM nars n1
WHERE (
  SELECT SUM(n2.file_size)
  FROM nars n2
  WHERE n2.last_accessed_at <= n1.last_accessed_at
) <= ?
`

// GetLeastUsedNars
//
//	SELECT
//	  n1.id, n1.narinfo_id, n1.hash, n1.compression, n1.file_size, n1.created_at, n1.updated_at, n1.last_accessed_at
//	FROM nars n1
//	WHERE (
//	  SELECT SUM(n2.file_size)
//	  FROM nars n2
//	  WHERE n2.last_accessed_at <= n1.last_accessed_at
//	) <= ?
func (q *Queries) GetLeastUsedNars(ctx context.Context, fileSize uint64) ([]Nar, error) {
	rows, err := q.db.QueryContext(ctx, getLeastUsedNars, fileSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Nar
	for rows.Next() {
		var i Nar
		if err := rows.Scan(
			&i.ID,
			&i.NarInfoID,
			&i.Hash,
			&i.Compression,
			&i.FileSize,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastAccessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNarByHash = `-- name: GetNarByHash :one
SELECT id, narinfo_id, hash, compression, file_size, created_at, updated_at, last_accessed_at
FROM nars
WHERE hash = ?
`

// GetNarByHash
//
//	SELECT id, narinfo_id, hash, compression, file_size, created_at, updated_at, last_accessed_at
//	FROM nars
//	WHERE hash = ?
func (q *Queries) GetNarByHash(ctx context.Context, hash string) (Nar, error) {
	row := q.db.QueryRowContext(ctx, getNarByHash, hash)
	var i Nar
	err := row.Scan(
		&i.ID,
		&i.NarInfoID,
		&i.Hash,
		&i.Compression,
		&i.FileSize,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastAccessedAt,
	)
	return i, err
}

const getNarByID = `-- name: GetNarByID :one
SELECT id, narinfo_id, hash, compression, file_size, created_at, updated_at, last_accessed_at
FROM nars
WHERE id = ?
`

// GetNarByID
//
//	SELECT id, narinfo_id, hash, compression, file_size, created_at, updated_at, last_accessed_at
//	FROM nars
//	WHERE id = ?
func (q *Queries) GetNarByID(ctx context.Context, id int64) (Nar, error) {
	row := q.db.QueryRowContext(ctx, getNarByID, id)
	var i Nar
	err := row.Scan(
		&i.ID,
		&i.NarInfoID,
		&i.Hash,
		&i.Compression,
		&i.FileSize,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastAccessedAt,
	)
	return i, err
}

const getNarInfoByHash = `-- name: GetNarInfoByHash :one
SELECT id, hash, created_at, updated_at, last_accessed_at
FROM narinfos
WHERE hash = ?
`

// GetNarInfoByHash
//
//	SELECT id, hash, created_at, updated_at, last_accessed_at
//	FROM narinfos
//	WHERE hash = ?
func (q *Queries) GetNarInfoByHash(ctx context.Context, hash string) (NarInfo, error) {
	row := q.db.QueryRowContext(ctx, getNarInfoByHash, hash)
	var i NarInfo
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastAccessedAt,
	)
	return i, err
}

const getNarInfoByID = `-- name: GetNarInfoByID :one
SELECT id, hash, created_at, updated_at, last_accessed_at
FROM narinfos
WHERE id = ?
`

// GetNarInfoByID
//
//	SELECT id, hash, created_at, updated_at, last_accessed_at
//	FROM narinfos
//	WHERE id = ?
func (q *Queries) GetNarInfoByID(ctx context.Context, id int64) (NarInfo, error) {
	row := q.db.QueryRowContext(ctx, getNarInfoByID, id)
	var i NarInfo
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastAccessedAt,
	)
	return i, err
}

const getNarTotalSize = `-- name: GetNarTotalSize :one
SELECT SUM(file_size) AS total_size
FROM nars
`

// GetNarTotalSize
//
//	SELECT SUM(file_size) AS total_size
//	FROM nars
func (q *Queries) GetNarTotalSize(ctx context.Context) (sql.NullFloat64, error) {
	row := q.db.QueryRowContext(ctx, getNarTotalSize)
	var total_size sql.NullFloat64
	err := row.Scan(&total_size)
	return total_size, err
}

const touchNar = `-- name: TouchNar :execrows
UPDATE nars
SET last_accessed_at = CURRENT_TIMESTAMP,
  updated_at = CURRENT_TIMESTAMP
WHERE hash = ?
`

// TouchNar
//
//	UPDATE nars
//	SET last_accessed_at = CURRENT_TIMESTAMP,
//	  updated_at = CURRENT_TIMESTAMP
//	WHERE hash = ?
func (q *Queries) TouchNar(ctx context.Context, hash string) (int64, error) {
	result, err := q.db.ExecContext(ctx, touchNar, hash)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const touchNarInfo = `-- name: TouchNarInfo :execrows
UPDATE narinfos
SET last_accessed_at = CURRENT_TIMESTAMP,
  updated_at = CURRENT_TIMESTAMP
WHERE hash = ?
`

// TouchNarInfo
//
//	UPDATE narinfos
//	SET last_accessed_at = CURRENT_TIMESTAMP,
//	  updated_at = CURRENT_TIMESTAMP
//	WHERE hash = ?
func (q *Queries) TouchNarInfo(ctx context.Context, hash string) (int64, error) {
	result, err := q.db.ExecContext(ctx, touchNarInfo, hash)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
