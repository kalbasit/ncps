name: Build and push Docker images with mult-arch support
on:
  workflow_call:
    inputs:
      systems:
        description: "The systems for which to add support for. JSON-formatted string."
        required: true
        type: string
      images:
        description: "List of Docker images to use as base name for tags"
        required: false
        type: string
      username:
        description: "Username used to log against the Docker registry"
        required: true
        type: string
      push_images:
        description: "Should the job push the image to Dockerhub?"
        required: true
        type: boolean
    secrets:
      password:
        description: "Password or personal access token used to log against the Docker registry"
        required: true
    outputs:
      tags:
        description: "The generated Docker tags"
        value: ${{ jobs.docker-meta.outputs.tags }}
      labels:
        description: "The generated Docker labels"
        value: ${{ jobs.docker-meta.outputs.labels }}
jobs:
  docker-meta:
    runs-on: ubuntu-24.04
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.images }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{raw}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha
    outputs:
      labels: ${{ steps.meta.outputs.labels }}
      tags: ${{ steps.meta.outputs.tags }}
  docker-images:
    strategy:
      matrix:
        system: ${{ fromJson(inputs.systems) }}
    runs-on: ubuntu-24.04
    needs: docker-meta
    steps:
      - name: Install required cross-system tool
        if: "${{ matrix.system != 'x86_64-linux' }}"
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static
        shell: bash
      - uses: DeterminateSystems/nix-installer-action@v20
        with:
          extra-conf: |
            extra-platforms = ${{ matrix.system }}
      - uses: DeterminateSystems/magic-nix-cache-action@v13
      - uses: actions/checkout@v5
      - name: Build the docker image
        shell: bash
        env:
          RELEASE_VERSION: ${{ github.ref_name }}
        run: |
          nix build -L --impure .#packages.${{ matrix.system }}.docker
      - name: Build the docker image pusher
        shell: bash
        env:
          RELEASE_VERSION: ${{ github.ref_name }}
        run: |
          nix build -L --impure .#packages.${{ matrix.system }}.push-docker-image
      - name: Login to Docker Hub
        if: inputs.push_images
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.username }}
          password: ${{ secrets.password }}
      - name: Push the docker image
        if: inputs.push_images
        env:
          DOCKER_IMAGE_TAGS: ${{ needs.docker-meta.outputs.tags }}
        shell: bash
        run: |
          ./result
  docker-manifest:
    runs-on: ubuntu-24.04
    needs: [docker-meta, docker-images]
    steps:
      - name: Create a multi-architecture manifest
        env:
          DOCKER_IMAGE_TAGS: ${{ needs.docker-meta.outputs.tags }}
          SYSTEMS: ${{ join(fromJson(inputs.systems), ',') }}
        shell: bash
        run: |
          for tag in $DOCKER_IMAGE_TAGS; do
            imgs=()
            for system in $( echo "$SYSTEMS" | tr ',' ' ' ); do
              imgs+=("$tag-$system")
            done

            docker manifest create $tag ${imgs[*]}
          done
      - name: Login to Docker Hub
        if: inputs.push_images
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.username }}
          password: ${{ secrets.password }}
      - name: Push the docker image
        if: inputs.push_images
        env:
          DOCKER_IMAGE_TAGS: ${{ needs.docker-meta.outputs.tags }}
        shell: bash
        run: |
          for tag in $DOCKER_IMAGE_TAGS; do
            docker manifest push $tag
          done
